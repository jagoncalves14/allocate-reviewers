name: Run All Review Rotations

on:
  schedule:
    # Runs every Wednesday at 4 AM Finland time (2 AM UTC)
    # - cron: '0 2 * * 3'
    # TESTING: Runs at 9:45 UTC (will revert after test)
    - cron: '45 9 * * 3'
  workflow_dispatch:
    inputs:
      manual_run:
        description: 'Manual run (updates existing column instead of creating new)'
        required: false
        type: boolean
        default: true

jobs:
  all-review-rotations:
    runs-on: ubuntu-latest
    permissions: write-all  # Needed to update GitHub Variables
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: poetry install
      
      - name: Check if Scheduled Rotation is Needed
        id: check_rotation
        if: github.event_name == 'schedule'
        env:
          LAST_SCHEDULED_ROTATION_DATE: ${{ vars.LAST_SCHEDULED_ROTATION_DATE }}
        run: |
          echo "üîç Checking if scheduled rotation is needed..."
          
          if poetry run python scripts/check_scheduled_rotation_needed.py; then
            echo "rotation_needed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Rotation will proceed"
          else
            echo "rotation_needed=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è  Skipping rotation (not yet due)"
          fi
      
      - name: Skip Rotation Message
        if: github.event_name == 'schedule' && steps.check_rotation.outputs.rotation_needed != 'true'
        run: |
          echo "‚è≠Ô∏è  Scheduled rotation skipped - less than 15 days since last rotation"
          echo "   Last scheduled rotation: ${{ vars.LAST_SCHEDULED_ROTATION_DATE }}"
          echo "   Next rotation will run when 14+ days have passed"
          exit 0
      
      - name: Create credentials file
        if: github.event_name != 'schedule' || steps.check_rotation.outputs.rotation_needed == 'true'
        run: |
          echo '${{ secrets.GOOGLE_CREDENTIALS_JSON }}' > credentials.json
      
      - name: Run All Rotations (All Sheets, All Types)
        if: github.event_name != 'schedule' || steps.check_rotation.outputs.rotation_needed == 'true'
        env:
          CREDENTIAL_FILE: credentials.json
          SHEET_NAMES: ${{ vars.SHEET_NAMES }}
        run: |
          MANUAL_FLAG=""
          
          if [ "${{ github.event.inputs.manual_run }}" = "true" ]; then
            MANUAL_FLAG="--manual"
            echo "üîß Manual run mode: Will update existing columns"
          else
            echo "üìÖ Scheduled run mode: Will create new columns"
          fi
          
          # Check if SHEET_NAMES is configured
          if [ -z "$SHEET_NAMES" ]; then
            echo "‚ùå Error: SHEET_NAMES variable is not configured!"
            echo "   Please set up Variables in Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Variables"
            exit 1
          fi
          
          # Display configuration (for debugging)
          echo "üìã Processing sheets:"
          echo "$SHEET_NAMES" | while read -r line; do
            [ -n "$line" ] && echo "   - $line"
          done
          
          echo ""
          echo "üöÄ Running rotations for:"
          echo "   - Individual Developers (all sheets)"
          echo "   - Teams (all sheets)"
          echo ""
          
          # Run the multi-sheet rotation (processes ALL sheets, ALL types)
          poetry run python scripts/run_multi_sheet_rotation.py --type all $MANUAL_FLAG
      
      - name: Update Last Scheduled Rotation Date
        if: |
          github.event_name == 'schedule' && 
          steps.check_rotation.outputs.rotation_needed == 'true' &&
          success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          TODAY=$(date -u +%Y-%m-%d)
          echo "üìù Updating LAST_SCHEDULED_ROTATION_DATE to: $TODAY"
          
          # Update the GitHub Variable using GitHub CLI
          gh variable set LAST_SCHEDULED_ROTATION_DATE --body "$TODAY" --repo "$REPO"
          
          echo "‚úÖ Last scheduled rotation date updated successfully"
      
      - name: Clean up credentials
        if: always()
        run: rm -f credentials.json
      
      - name: Report Status
        if: always()
        run: |
          if [ "${{ github.event_name }}" == "schedule" ] && [ "${{ steps.check_rotation.outputs.rotation_needed }}" != "true" ]; then
            echo "‚è≠Ô∏è  Scheduled rotation was skipped (not yet due)"
            exit 0
          elif [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ All rotations completed successfully!"
          else
            echo "‚ùå Some rotations failed - check logs above"
            exit 1
          fi
